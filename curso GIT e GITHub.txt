GIT: Versionamento de arquivos
GITHub: Local onde se pode armazenar arquivos versionados (existem outros)

1) Baixar e instalar o git no computador
2) Criar conta no GitHub: www.github.com
sandro.livino@gmail.com
N*********@
3) Criar primeiro projeto com o git
a) dentro do diretório do windows explorer: botão direito >> Git Bash Here
b) no prompt de comando que se abre: git init
c) observar que dentro do diretório foi criada a pasta .git, que só pode ser vista se marcarmos para exibir itens ocultos
d) git status: verifica o que já foi commitado e os arquivos que não foram adicionados (ele até dá a dica de usar o git add). Mensagem: "nothing added to commit but untracked files present (use "git add" to track)"
e) Para adicionar 01 arquivo ao controle de versão: git add "nome_do_arquivo.txt"
f) Para adicionar N arquivos ao controle de versão: git add .
g) Arquivos prontos para serem enviados ao controle de versão na nuvem (GitHub). Criar a primeira versão do código com: git commit -m "Versão inicial - trabalho prático (investments) IGTI"
h) Primeira vez: configurar meu computador com usuário e senha do GitHub:
git config --global user.email "sandro.livino@gmail.com"
git config --global user.name "Sandro Livino"
i) Enviar o commit para o repositório
i.1) Primeiro devemos criar um repositório no GitHub. Molezinha.
i.2) Definir para onde o código será enviado com o comando: git remote add origin https://github.com/sandrolivino/igti-react-investments
i.3) MANDAR (MAS... VAI DAR ERRO)
git push
fatal: The current branch master has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin master

To have this happen automatically for branches without a tracking
upstream, see 'push.autoSetupRemote' in 'git help config'
i.4) Rodar o comando sugerido: git push --set-upstream origin master
i.5) Autenticar no GitHub (Sign in with your browser)
i.6) Atualizar o GitHub (F5) para verificar se os arquivos estão todos lá.

j) Publicar esta versão deste arquivo como sendo a v2 do projeto.
j.1) git add .
j.2) git status (só para confirmar se foi adicionado)
j.3) git commit -m "Versão 02...."
j.4) git push

k) Ver histórico: git reflog

l) Voltar uma versão: git reset --hard [id_da_versao_descoberta_pelo_reflog] NÃO RODAR ESSE COMANDO SEM QUE SEJA EXTREMAMENTE NECESSÁRIO

m)Conceitos de branch (galhos)

- No trabalho em equipe é importante definir uma branch como estável. Na CAESB chamamos de trunk
- As outras branches quando finalizadas serão "mergeadas" com a branch estável. Como fazer?

m.1) Iniciar o repositório numa pasta vazia: git init (verificar pasta oculta .git)
m.2) Configurar usuário do git remoto (e-mail): git config --global user.email "sandro.livino@gmail.com"
m.3) Configurar usuário do git remoto (nome): git config --global user.name "Sandro Livino"
m.4) Fazer o checkout dos arquivos da branch master: git checkout master
m.5) Criar uma nova branch: git branch staging (qualquer nome que identifique a funcionalidade)
m.6) Trabalhar no código
m.7) Adicionar os arquivos alterados: git add .
m.8) Commitar os arquivos alterados: git commit -m "Versão final do aplicativo"
m.9) Subir as alterações para o repositório:  git push --set-upstream origin staging (SE FOR A PRIMEIRA VEZ, SENÃO, SOMENTE: git push)

====== PRONTO, MINHAS ALTERAÇÕES FORAM SALVAS NO REPOSITÓRIO REMOTO, MAS...... NÃO ESTÃO "MERGEADAS"

m.10) Voltar para a branch principal (BRANCH QUE IRÁ RECEBER AS ATUALIZAÇÕES): git checkout master
m.11) Baixar as alterações que outros desenv porventura tenham feito na master: git pull (É EXTREMAMENTE NECESSÁRIO, PARA NÃO FAZER MERGE COM UMA VERSÃO DEFASADA DA BRANCH PRINCIPAL)
m.12) Realizar o merge: git merge staging (staging é o nome da branch onde estão as alterações)

======= PRONTO. AGORA, PARA MANDAR O MERGE PARA O REPOSITÓRIO REMOTO:
m.13) git push


======= OUTROS COMANDOS
Criar uma branch direto da branch principal: git checkout -b staging2 master (Cria uma branch com todos os arquivos da branch master com o nome staging2, já fazendo o checkout para staging2)

======= PULL REQUEST (VALIDAÇÃO DE PUBLICAÇÃO POR OUTRAS PESSOAS)
Em alguns casos as alterações precisam ser aprovados por outro desenvolvedor. Nesse caso, antes de subir as alterações é preciso fazer um pull request.
1) Depois de adicionado, commitado e enviado para o repositório (push)
Enfim, não achei interessante.... 


FIM!!